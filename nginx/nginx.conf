
#user  nobody;
worker_processes  3;

#error_log  /var/log/nginx/error.log;
error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  debug;

#pid        logs/nginx.pid;


# only log critical errors
#error_log /var/log/nginx/error.log crit






events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    # Buffer log writes to speed up IO, or disable them altogether
    #access_log /var/log/nginx/access.log main buffer=8k;
    #access_log off;

    sendfile        on;
    #tcp_nopush     on;

    # Caches information about open FDs, freqently accessed files.
    # Changing this setting, in my environment, brought performance up from 560k req/sec, to 904k req/sec.
    # I recommend using some varient of these options, though not the specific values listed below.
    open_file_cache max=5000 inactive=20s; 
    open_file_cache_valid 30s; 
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # Timeout for keep-alive connections. Server will close connections after this time.
    keepalive_timeout 30;
    
    # allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
    reset_timedout_connection on;
    
    # send the client a "request timed out" if the body is not loaded by this time. Default 60.
    client_body_timeout 15;
     
      
    # If the client stops reading data, free up the stale client connection after this much time. Default 60.
    send_timeout 4;
    
    # Compression. Reduces the amount of data that needs to be transferred over the network
    gzip_static on;
    gzip on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    gzip_disable "MSIE [1-6]\.";

    #gzip  on;
    limit_req_zone  $binary_remote_addr  zone=one:5m   rate=30r/m;
    limit_req_zone  $binary_remote_addr  zone=two:5m   rate=50r/s;
 
    server {
        listen       80;
        server_name  pgexercises.com;
	return       301 https://$server_name$request_uri;
    }

    server {
        listen       443 ssl;
        server_name  pgexercises.com www.pgexercises.com;

	ssl_certificate /etc/letsencrypt/live/pgexercises.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/pgexercises.com/privkey.pem;
        add_header Strict-Transport-Security "max-age=31536000";
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

        #charset koi8-r;

        #access_log  logs/host.access.log  main;


        location / {
            root   /usr/local/nginx/site/website-compressed;
            index  index.html index.htm;
            log_not_found off;
            limit_req   zone=two  burst=200 nodelay;
	    location ~* \.(eot|ttf|woff)$ {
                add_header Access-Control-Allow-Origin *;
                expires max;
            }
            location ~* \.(js|css)$ {
	        expires 48h;
            }
            location ~* \.(html)$ {
	        expires 30m;
            }
            location ~* \.(png|jpg|jpeg|gif|ico|woff|svg)$ {
	        expires max;
            }
        }

        location /SQLForwarder/ {
       	    proxy_pass http://127.0.0.1:8080/SQLForwarder/;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
	    proxy_redirect off;
            proxy_buffering off;
            proxy_store     off;
     
            proxy_connect_timeout 3;
            proxy_send_timeout    10;
            proxy_read_timeout    10;
            limit_req   zone=one  burst=15;
        }

#	location /.well-known {
#                allow all;
#        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   share/nginx/html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           share/nginx/html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   share/nginx/html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   share/nginx/html;
    #        index  index.html index.htm;
    #    }
    #}

}
